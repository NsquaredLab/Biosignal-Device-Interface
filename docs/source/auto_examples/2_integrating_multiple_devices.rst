
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\2_integrating_multiple_devices.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_2_integrating_multiple_devices.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_2_integrating_multiple_devices.py:


Integrating all available device in your own software.
======================================================

This example demonstrates how to integrate all available biosignal device widgets 
into your own PySide6 application. The example shows how to create a main window, 
instantiate the AllDevicesWidget, connect its signals, and handle the incoming data.

Note: This example creates a GUI application. When run directly, it will open a window.
During documentation generation, it only demonstrates the setup without showing the GUI.

.. GENERATED FROM PYTHON SOURCE LINES 12-67

.. code-block:: Python


    from __future__ import annotations
    from typing import TYPE_CHECKING
    import os
    import sys
    from PySide6.QtWidgets import QApplication, QMainWindow

    from biosignal_device_interface.devices import (
        AllDevicesWidget,
    )

    if TYPE_CHECKING:
        import numpy as np


    class MainWindow(QMainWindow):
        def __init__(self):
            super().__init__()

            # Set the title of the main window
            self.setWindowTitle("Main Window with All Devices")

            # Instantiate the AllDevicesWidget
            all_devices_widget = AllDevicesWidget(self)

            # Connect the signals of the widget to the main window
            all_devices_widget.data_arrived.connect(self._update)
            all_devices_widget.biosignal_data_arrived.connect(self._emg_update)
            all_devices_widget.auxiliary_data_arrived.connect(self._aux_update)
            all_devices_widget.connect_toggled.connect(self._device_connection_state)
            all_devices_widget.configure_toggled.connect(self._device_configuration_state)
            all_devices_widget.stream_toggled.connect(self._device_stream_state)

            # Set the central widget of the main window
            self.setCentralWidget(all_devices_widget)

        def _update(self, data: np.ndarray):
            print("Incoming data from device:", data.shape)

        def _emg_update(self, data: np.ndarray):
            print("Incoming emg data from device:", data.shape)

        def _aux_update(self, data: np.ndarray):
            print("Incoming auxiliary data from device:", data.shape)

        def _device_connection_state(self, is_connected: bool):
            print("Connection state:", is_connected)

        def _device_configuration_state(self, is_configured: bool):
            print("Configuration state:", is_configured)

        def _device_stream_state(self, is_streaming: bool):
            print("Streaming state:", is_streaming)









.. GENERATED FROM PYTHON SOURCE LINES 68-73

Creating the Application and Main Window
=========================================

Here we demonstrate how to set up the application and create the main window.
In a real application, you would call app.exec() to start the event loop.

.. GENERATED FROM PYTHON SOURCE LINES 73-104

.. code-block:: Python


    # Check if we're in a headless environment (like during documentation generation)
    # or if DISPLAY is not available
    is_headless = (
        os.environ.get('DISPLAY', '') == '' or 
        'sphinx' in sys.modules or
        'PYTEST_CURRENT_TEST' in os.environ
    )

    if not is_headless:
        # Only create QApplication if we're not in a headless environment
        app = QApplication(sys.argv)
    else:
        # For documentation/testing, we can still demonstrate the setup
        app = None

    # Create an instance of the main window
    # This demonstrates the complete setup process
    print("Creating MainWindow instance...")
    if app is not None:
        window = MainWindow()
        print("MainWindow created successfully!")
        print("All devices widget integrated and signals connected.")
    else:
        print("Running in headless mode - skipping GUI creation")
        print("In a real application, you would:")
        print("1. Create QApplication(sys.argv)")
        print("2. Create MainWindow() instance")
        print("3. Call window.show()")
        print("4. Call sys.exit(app.exec())")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Creating MainWindow instance...
    Running in headless mode - skipping GUI creation
    In a real application, you would:
    1. Create QApplication(sys.argv)
    2. Create MainWindow() instance
    3. Call window.show()
    4. Call sys.exit(app.exec())




.. GENERATED FROM PYTHON SOURCE LINES 105-120

Running the Application
=======================

To actually run this application with a visible GUI, execute this script directly:

.. code-block:: bash

   python examples/2_integrating_multiple_devices.py

This will open a window with interfaces for all available devices where you can:

* Connect to multiple biosignal devices simultaneously
* Configure each device's settings independently
* Start/stop data streaming from all devices
* Monitor incoming biosignal and auxiliary data from all connected devices

.. GENERATED FROM PYTHON SOURCE LINES 120-128

.. code-block:: Python


    if __name__ == "__main__" and not is_headless:
        # Show the main window and start the event loop
        window.show()
        print("Starting application event loop...")
        sys.exit(app.exec())
    elif __name__ == "__main__":
        print("Headless mode detected - example completed without showing GUI")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Headless mode detected - example completed without showing GUI





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.377 seconds)

**Estimated memory usage:**  5 MB


.. _sphx_glr_download_auto_examples_2_integrating_multiple_devices.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 2_integrating_multiple_devices.ipynb <2_integrating_multiple_devices.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 2_integrating_multiple_devices.py <2_integrating_multiple_devices.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
